unit TestuServicesManager;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit
  being tested.

}

interface

uses
  TestFramework, System.SysUtils, Windows, uShellApi, WinSvc, uServicesManager,
  System.Classes, Tlhelp32, Forms;

type
  // Test methods for class TServiceManager

  TestTServiceManager = class(TTestCase)
  strict private
    FServiceManager: TServiceManager;
  private
    s_NewFileName: string;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestGetLocalName;
    procedure TestGetServicesList;
    procedure TestGetServiceState;
    procedure TestRunService;
    procedure TestStopService;
    procedure TestStartTask;
    procedure TestKillTask;
  end;

implementation

procedure TestTServiceManager.SetUp;
begin
  FServiceManager := TServiceManager.Create;
  s_NewFileName := StringReplace(ExtractFileName(Application.ExeName),
                                 '.exe',
                                 '1.exe',
                                 [rfReplaceall]);
end;

procedure TestTServiceManager.TearDown;
begin
  if FileExists(ExtractFilePath(Application.ExeName) + s_NewFileName) then
    DeleteFile(PChar(ExtractFilePath(Application.ExeName) + s_NewFileName));
  FreeAndNil(FServiceManager);
end;

procedure TestTServiceManager.TestGetLocalName;
var
  ReturnValue: string;
begin
  ReturnValue := FServiceManager.GetLocalName;
  CheckEquals('SCIV-PC', ReturnValue, '');
end;

procedure TestTServiceManager.TestGetServicesList;
var
  ReturnList: TStringList;
  ReturnValue: integer;
  Result: boolean;
begin
  ReturnList := TStringList.Create;
  ReturnValue := FServiceManager.GetServicesList(ReturnList, 'ose');
  Result := (ReturnList.Count = ReturnValue) and
            (ReturnValue = 1);
  FreeAndNil(ReturnList);
  CheckTrue(Result, '');
end;

procedure TestTServiceManager.TestGetServiceState;
var
  ReturnValue: System.Cardinal;
begin
  ReturnValue := FServiceManager.GetServiceState('ose');
  CheckEquals(SERVICE_STOPPED, ReturnValue, '');
end;

procedure TestTServiceManager.TestRunService;
var
  ReturnValue: Boolean;
begin
  ReturnValue := FServiceManager.RunService('ose');
  ReturnValue := ReturnValue and
                 (FServiceManager.GetServiceState('ose') = SERVICE_RUNNING);
  CheckTrue(ReturnValue, '');
end;

procedure TestTServiceManager.TestStopService;
var
  ReturnValue: Boolean;
begin
  ReturnValue := FServiceManager.StopService('ose');
  ReturnValue := ReturnValue and
                 (FServiceManager.GetServiceState('ose') = SERVICE_STOPPED);
  CheckTrue(ReturnValue, '');
end;

procedure TestTServiceManager.TestStartTask;
var
  ReturnValue: Boolean;
begin
  CopyFile(PChar(Application.ExeName), PChar(s_NewFileName), false);
  ReturnValue := FServiceManager.StartTask(s_NewFileName);
  CheckTrue(ReturnValue, '');
end;

procedure TestTServiceManager.TestKillTask;
var
  ReturnValue: Integer;
begin
  ReturnValue := FServiceManager.KillTask(s_NewFileName);
  DeleteFile(PChar(ExtractFilePath(Application.ExeName) + s_NewFileName));
  CheckEquals(1, ReturnValue, '');
end;

initialization
  RegisterTest(TestTServiceManager.Suite);
end.

