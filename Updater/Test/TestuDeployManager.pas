unit TestuDeployManager;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit 
  being tested.

}

interface

uses
  TestFramework, uServicesManager, uShellAPI, VCL.ExtCtrls, uDeployManager, Classes,
  uJenkinsAPI, SysUtils, uConfigManager, Forms;

type
  // Test methods for class TDeployManager

  TestTDeployManager = class(TTestCase)
  strict private
    FDeployManager: TDeployManager;
  private
    FConfigManager: TConfigManager;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestCreateDirectories;
    procedure TestGetLastBuildNumber;
    procedure TestCheckNewRelease;
    procedure TestCheckNewBuild;
    procedure TestCheckAllReleases;
  end;

implementation

procedure TestTDeployManager.SetUp;
begin
  FConfigManager := TConfigManager.Create(ExtractFilePath(Application.ExeName) +
                                          'testconfig.ini');
  if FConfigManager.LoadSettings then
    FDeployManager := TDeployManager.Create(FConfigManager);
end;

procedure TestTDeployManager.TearDown;
begin
  FreeAndNil(FDeployManager);
  FreeAndNil(FConfigManager);
end;

procedure TestTDeployManager.TestCreateDirectories;
var
  Result: boolean;
begin
  Result := DirectoryExists(ExtractFilePath(Application.ExeName) + 'TEMP') and
            DirectoryExists(ExtractFilePath(Application.ExeName) + 'TEMP\Release') and
            DirectoryExists(ExtractFilePath(Application.ExeName) + 'TEMP\Backup') and
            DirectoryExists(ExtractFilePath(Application.ExeName) + 'TEMP\Release\MONITORING') and
            DirectoryExists(ExtractFilePath(Application.ExeName) + 'TEMP\Release\LOGISTIC') and
            DirectoryExists(ExtractFilePath(Application.ExeName) + 'TEMP\Backup\MONITORING') and
            DirectoryExists(ExtractFilePath(Application.ExeName) + 'TEMP\Backup\LOGISTIC');
  CheckTrue(Result);
end;


procedure TestTDeployManager.TestGetLastBuildNumber;
var
  ReturnValue: string;
begin
  ReturnValue := FDeployManager.GetLastBuildNumber(0);
  CheckEquals('15', ReturnValue, '');
end;


procedure TestTDeployManager.TestCheckNewRelease;
var
  ReturnValue: string;
begin
  ReturnValue := FDeployManager.CheckNewRelease(0);
  CheckEquals('7.1.4', ReturnValue, '');
end;


procedure TestTDeployManager.TestCheckNewBuild;
var
  ReturnValue: string;
begin
  ReturnValue := FDeployManager.CheckNewBuild(0);
  CheckEquals('15', ReturnValue, '');
end;


procedure TestTDeployManager.TestCheckAllReleases;
var
  ReturnValue: Boolean;
begin
  ReturnValue := FDeployManager.CheckAllReleases;
  CheckTrue(ReturnValue);
end;


initialization
  RegisterTest(TestTDeployManager.Suite);
end.

