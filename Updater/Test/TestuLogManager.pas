unit TestuLogManager;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit 
  being tested.

}

interface

uses
  TestFramework, System.Classes, Winapi.Windows, uLogManager, System.SysUtils;

type
  // Test methods for class TLogManager

  TestTLogManager = class(TTestCase)
  strict private
    FLogManager: TLogManager;
    FLogFile: TextFile;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestWriteMessageToLog;
    procedure TestWriteMessageToLog1;
    procedure TestWriteMessageToLog2;
    procedure TestWriteDebugMessageToLog;
    procedure TestWriteErrorMessageToLog;
    procedure TestWriteEmptyStringToLog;
  end;

implementation

procedure TestTLogManager.SetUp;
begin
  FLogManager := TLogManager.Create(ExtractFilePath(ParamStr(0)), 'TestLog.log', false, 'DEBUG', true);
  AssignFile(FLogFile, ExtractFilePath(ParamStr(0)) + 'TestLog.log');
end;

procedure TestTLogManager.TearDown;
begin
  CloseFile(FLogFile);
  DeleteFile(ExtractFilePath(ParamStr(0)) + 'TestLog.log');
  FLogManager.Free;
  FLogManager := nil;
end;

procedure TestTLogManager.TestWriteMessageToLog;
var
  Result: string;
begin
  FLogManager.WriteMessageToLog(lmtDebug, 'TestMessageText');
  Reset(FLogFile);
  ReadLn(FLogFile, Result);
  Delete(Result, 1, 29);
  CheckEquals('DEBUG:          TestMessageText', Result, '' );
end;

procedure TestTLogManager.TestWriteMessageToLog1;
var
  Result: string;
begin
  FLogManager.WriteMessageToLog(lmtError, 'TestMessageText');
  Reset(FLogFile);
  ReadLn(FLogFile, Result);
  Delete(Result, 1, 29);
  CheckEquals('ERROR:          TestMessageText', Result, '' );
end;

procedure TestTLogManager.TestWriteMessageToLog2;
var
  Result: string;
begin
  FLogManager.WriteMessageToLog('TestMessageText');
  Reset(FLogFile);
  ReadLn(FLogFile, Result);
  CheckEquals(#9#9'TestMessageText', Result, '');
end;

procedure TestTLogManager.TestWriteDebugMessageToLog;
var
  Result: string;
begin
  FLogManager.WriteDebugMessageToLog('TestMessageText');
  Reset(FLogFile);
  ReadLn(FLogFile, Result);
  Delete(Result, 1, 29);
  CheckEquals('DEBUG:          TestMessageText', Result, '' );
end;

procedure TestTLogManager.TestWriteErrorMessageToLog;
var
  ReturnValue: string;
  Result: boolean;
begin
  FLogManager.WriteErrorMessageToLog('TestMessageText', 'TestErrorMessage', 'TestStackTrace');
  Reset(FLogFile);
  ReadLn(FLogFile, ReturnValue);
  Delete(ReturnValue, 1, 29);
  Result := ReturnValue = 'ERROR:          TestMessageText';
  ReadLn(FLogFile, ReturnValue);
  Result := Result and (ReturnValue = #9#9'TestErrorMessage');
  ReadLn(FLogFile, ReturnValue);
  Result := Result and (ReturnValue = #9#9'TestStackTrace');
  CheckTrue(Result);
end;

procedure TestTLogManager.TestWriteEmptyStringToLog;
var
  Result: string;
begin
  FLogManager.WriteEmptyStringToLog;
  Reset(FLogFile);
  ReadLn(FLogFile, Result);
  CheckEquals('', Result, '');
end;

initialization
  RegisterTest(TestTLogManager.Suite);
end.

